using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Java2Cs.Java
{
    class CodeGenerator : JavaParserBaseListener
    {
        private readonly StringBuilder _code;


        internal CodeGenerator(StringBuilder code)
        {
            _code = code;
        }

        #region CompilationUnit

        public override void EnterCompilationUnit([NotNull] JavaParser.CompilationUnitContext context)
        {

            _code.AppendLine("// <auto-generated>Java2Cs</auto-generated>");
            _code.AppendLine();

            var ns = context.packageDeclaration();
            var set = new HashSet<string>();

            foreach (var import in context.importDeclaration())
            {
                var name = import.qualifiedName().GetText();
                var s = import.STATIC() != null;
                if (s)
                {
                    _code.AppendLine($"using static {name};");
                }
                else
                {
                    if (!import.GetText().EndsWith(".*;")) name = name.Substring(0, name.LastIndexOf("."));
                    set.Add(name);
                }

            }

            foreach (var import in set)
                _code.AppendLine($"using {import};");

            _code.AppendLine();
            _code.AppendLine($"namespace {ns.qualifiedName().GetText()} {{");
        }

        public override void ExitCompilationUnit([NotNull] JavaParser.CompilationUnitContext context)
        {
            _code.AppendLine("}");
        }
        #endregion

        #region TypeDeclaration
        public override void EnterTypeDeclaration([NotNull] JavaParser.TypeDeclarationContext context)
        {
            foreach (var m in context.classOrInterfaceModifier())
            {
                var name = m.GetText();
                switch (name)
                {
                    case "public":
                    case "internal":
                    case "abstract":
                    case "static":
                        _code.Append($"{name} ");
                        break;

                    case "final":
                        _code.Append($"sealed ");
                        break;
                }

            }

            if (context.interfaceDeclaration() != null)
            {
                var @interface = context.interfaceDeclaration();
                _code.Append($"interface { @interface.IDENTIFIER().GetText()} ");
                ProcessTypeList(@interface.typeList());
            }
            else if (context.classDeclaration() != null)
            {
                var @class = context.classDeclaration();
                _code.Append($"class { @class.IDENTIFIER().GetText()} ");
                var ext = @class.typeType();
                if (ext != null)
                {
                    _code.Append($": {ext.GetText()}");
                    ProcessTypeList(@class.typeList(), false);
                }
                else
                    ProcessTypeList(@class.typeList());
            }
            else if (context.enumDeclaration() != null)
            {
                var @enum = context.enumDeclaration();
                _code.Append($"enum { @enum.IDENTIFIER().GetText()} ");
            }
            else
            {
                throw new NotSupportedException($"Declaration not supported");
            }

            _code.AppendLine("{");
        }

        public override void ExitTypeDeclaration([NotNull] JavaParser.TypeDeclarationContext context)
        {
            _code.AppendLine("}");
        }
        #endregion


        #region Utils


        private void ProcessTypeList(JavaParser.TypeListContext ctx, bool addColon = true)
        {
            var extends = ctx;

            if (extends == null)
                return;

            if (addColon) _code.Append(": ");

            _code.Append(string.Join(", ", extends.typeType().Select(t => t.GetText()))).Append(" ");
        }
        #endregion


        public static string Run(JavaParser.CompilationUnitContext tree)
        {
            var w = new ParseTreeWalker();
            var code = new StringBuilder();
            var v = new CodeGenerator(code);

            w.Walk(v, tree);

            return code.ToString();
        }
    }
}
